(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



<<Notation`


Notation[\!\(\*
TagBox[
OverscriptBox["\[ScriptCapitalH]_", "^"],
"NotationTemplateTag"]\) \[DoubleLongLeftRightArrow] \!\(\*
TagBox[
RowBox[{"Operator", "[", "\[ScriptCapitalH]_", "]"}],
"NotationTemplateTag",
BaseStyle->"NotationTemplateStyle",
Editable->True]\)]
InfixNotation[\!\(\*
TagBox["\[SmallCircle]",
"NotationTemplateTag"]\),op]

Clear[op]
SetAttributes[op,Listable]
op[a__,op[b__]]:=op[a,b]
op[op[a__],b__]:=op[a,b]
op[a_]:=a
op[a__,op[b_,c__],d__]:=op[a,b,c,d]/;FreeQ[b,Operator]==False
op[a_,b__]:=a op[b] /;FreeQ[a,Operator]
op[a__,b_]:=op[a] b /;FreeQ[b,Operator]
op[a__,b_,c__]:=op[a,c] b /;FreeQ[b,Operator]
op[c__,a_/r_,b__]:=1/r op[c,a,b]/;FreeQ[r,Operator]
op[a__,b_/r_]:=1/r op[a,b]/;FreeQ[r,Operator]
op[b_/r_,a__]:=1/r op[b,a]/;FreeQ[r,Operator]
op[r_ a_,b__]:=r op[a,b]/;FreeQ[r,Operator]
op[a_ r_,b__]:=r op[a,b]/;FreeQ[r,Operator]
op[a__,r_ b_]:=r op[a,b]/;FreeQ[r,Operator]
op[a__,b_ r_]:=r op[a,b]/;FreeQ[r,Operator]
op[a__,r_ b_,c__]:=r op[a,b,c]/;FreeQ[r,Operator]
op[a__,b_ r_,c__]:=r op[a,b,c]/;FreeQ[r,Operator]
op[r_ + a_,b__]:=op[r,b]+op[a,b]
op[r_ - a_,b__]:=op[r,b]-op[a,b]
op[r__, a_ + b_]:=op[r,a]+op[r,b]
op[r__ , a_- b_]:=op[r,a]-op[r,b]
op[r__, a_ + b_,c__]:=op[r,a,c]+op[r,b,c]
op[r__ , a_- b_,c__]:=op[r,a,c]-op[r,b,c]

pow[a_,n_]:=If[n==0,1,op[pow[a,n-1],a]]

Clear[SuperDagger]
SetAttributes[SuperDagger,Listable]

SuperDagger[a_ + b_]:= SuperDagger[a] + SuperDagger[b]
SuperDagger[a_ b_]:=SuperDagger[a] SuperDagger[b] 
SuperDagger[a_]:=Conjugate[a]/; FreeQ[a,Operator]
SuperDagger[a_]:=Part[a,1]/;Head[a]==SuperDagger
SuperDagger[a_[b__]]:=SuperDagger[a][b] /;!FreeQ[a,Operator]&&FreeQ[{b},Operator]&&UnsameQ[a,Operator]

SuperDagger[a_] :=Apply[op,Reverse[SuperDagger[Level[a,1]]]]/;Head[a]==op


co[a_,b_]:=op[a,b]-op[b,a]

commutator[a_,b_,c_]:=(
op[a,b]:=op[b,a]+c;
op[n1__,a,b]:=op[n1,b,a]+op[n1,c];
op[a,b,m1__]:=op[b,a,m1]+op[c,m1];
op[n1__,a,b,m1__]:=op[n1,b,a,m1]+op[n1,c,m1];
)

nmCommutatorArray[a_,b_,c_]:=(
op[a[n_],b[m_]]:=op[b[m],a[n]]+c[n,m];
op[n1__,a[n_],b[m_]]:=op[n1,b[m],a[n]]+op[n1,c[n,m]];
op[a[n_],b[m_],m1__]:=op[b[m],a[n],m1]+op[c[n,m],m1];
op[n1__,a[n_],b[m_],m1__]:=op[n1,b[m],a[n],m1]+op[n1,c[n,m],m1];
)

constCommutatorArray[a_,b_,c_]:=(
op[a[n_],b[m_]]:=op[b[m],a[n]]+c;
op[n1__,a[n_],b[m_]]:=op[n1,b[m],a[n]]+op[n1,c];
op[a[n_],b[m_],m1__]:=op[b[m],a[n],m1]+op[c,m1];
op[n1__,a[n_],b[m_],m1__]:=op[n1,b[m],a[n],m1]+op[n1,c,m1];
)

listThatCommute[a_]:=(
Do[commutator[a[[ii]],a[[jj]],0],{ii,1,Length[a]-1},{jj,ii+1,Length[a]}];
)

nmListThatCommute[a_]:=(
Do[constCommutatorArray[a[[ii]],a[[jj]],0],{ii,1,Length[a]-1},{jj,ii+1,Length[a]}];
)

selfCommutingField[\[Psi]_]:=(
op[n__,\[Psi][a_],\[Psi][b_],m__]:=op[n,\[Psi][b],\[Psi][a],m]/;!OrderedQ[{a,b}];
op[n__,\[Psi][a_],\[Psi][b_]]:=op[n,\[Psi][b],\[Psi][a]]/;!OrderedQ[{a,b}];op[\[Psi][a_],\[Psi][b_],m__]:=op[\[Psi][b],\[Psi][a],m]/;!OrderedQ[{a,b}];
op[\[Psi][a_],\[Psi][b_]]:=op[\[Psi][b],\[Psi][a]]/;!OrderedQ[{a,b}];
op[n__,SuperDagger[\[Psi]][a_],SuperDagger[\[Psi]][b_],m__]:=op[n,SuperDagger[\[Psi]][b],SuperDagger[\[Psi]][a],m]/;!OrderedQ[{a,b}];
op[n__,SuperDagger[\[Psi]][a_],SuperDagger[\[Psi]][b_]]:=op[n,SuperDagger[\[Psi]][b],SuperDagger[\[Psi]][a]]/;!OrderedQ[{a,b}];
op[SuperDagger[\[Psi]][a_],SuperDagger[\[Psi]][b_],m__]:=op[SuperDagger[\[Psi]][b],SuperDagger[\[Psi]][a],m]/;!OrderedQ[{a,b}];
op[SuperDagger[\[Psi]][a_],SuperDagger[\[Psi]][b_]]:=op[SuperDagger[\[Psi]][b],SuperDagger[\[Psi]][a]]/;!OrderedQ[{a,b}];
)

ifin[a_,list_]:=Module[{j},Total[Boole[Table[a==list[[j]],{j,1,Length[list]}]]]>0]
iffreeq[a__,list_]:=Module[{j},Product[Boole[FreeQ[{a},list[[j]]]],{j,1,Length[list]}]>0]


expect[expr_,\[Rho]_]:=Module[{oip} ,((expr/.op->oip)//.{oip[n__,\[Rho],m__]:>oip[m,n,\[Rho]],oip[\[Rho],m__]:>oip[m,\[Rho]]})/.{oip->op}]
expect[a_,expr_,\[Rho]_]:=Module[{oip,j} ,((expr/.op->oip)//.Flatten[Table[{oip[n__,\[Rho],m__,a[[j]]]->oip[a[[j]],n,\[Rho],m],oip[\[Rho],m__,a[[j]]]->oip[a[[j]],\[Rho],m],oip[n__,\[Rho],a[[j]]]->oip[a[[j]],n,\[Rho]],oip[\[Rho],a[[j]]]->oip[a[[j]],\[Rho]],oip[n__,\[Rho],m__,a[[j]],l__]/;iffreeq[l,a]->oip[a[[j]],n,\[Rho],m,l],oip[n__,\[Rho],a[[j]],l__]/;iffreeq[l,a]->oip[a[[j]],n,\[Rho],l],oip[\[Rho],m__,a[[j]],l__]/;iffreeq[l,a]->oip[a[[j]],\[Rho],m,l],oip[\[Rho],a[[j]],l__]/;iffreeq[l,a]->oip[a[[j]],\[Rho],l]},{j,1,Length[a]}]])/.{oip->op}]
vacExpect[a_,expr_,\[Rho]_]:=Module[{oip,j} ,Simplify[expect[Union[a,SuperDagger[a]],expr,\[Rho]]/. {op->oip}]//. (Flatten[Table[{oip[n__,a[[j]],m__,\[Rho],l__]/;iffreeq[m,SuperDagger[a]]->0,oip[n__,a[[j]],m__,\[Rho]]/;iffreeq[m,SuperDagger[a]]->0,oip[n__,a[[j]],\[Rho],l__]->0,oip[a[[j]],m__,\[Rho],l__]/;iffreeq[m,SuperDagger[a]]->0,oip[a[[j]],m__,\[Rho]]/;iffreeq[m,SuperDagger[a]]->0,oip[a[[j]],\[Rho],l__]->0,oip[n__,a[[j]],\[Rho]]->0,oip[n__,SuperDagger[a][[j]],m__,\[Rho],l__]/;(iffreeq[n,a]&&iffreeq[l,a])->0,oip[n__,SuperDagger[a][[j]],m__,\[Rho]]/;iffreeq[n,a]->0,oip[n__,SuperDagger[a][[j]],\[Rho],l__]/;(iffreeq[n,a]&&iffreeq[l,a])->0,oip[SuperDagger[a][[j]],m__,\[Rho],l__]/;iffreeq[l,a]->0,oip[SuperDagger[a][[j]],m__,\[Rho]]->0,oip[SuperDagger[a][[j]],\[Rho],l__]/;iffreeq[l,a]->0,oip[n__,SuperDagger[a][[j]],\[Rho]]/;iffreeq[n,a]->0},{j,1,Length[a]}]])/. {oip->op}]
nmExpect[expr_,\[Rho]_]:=Module[{oip} ,((expr/.op->oip)//.{oip[n__,\[Rho],m__]:>oip[m,n,\[Rho]],oip[\[Rho],m__]:>oip[m,\[Rho]]})/.{oip->op}]
nmExpect[a_,expr_,\[Rho]_]:=Module[{oip,j} ,((expr/.op->oip)//.Flatten[Table[{oip[n__,\[Rho],m__,a[[j]][w_]]->oip[a[[j]][w],n,\[Rho],m],oip[\[Rho],m__,a[[j]][w_]]->oip[a[[j]][w],\[Rho],m],oip[n__,\[Rho],a[[j]][w_]]->oip[a[[j]][w],n,\[Rho]],oip[\[Rho],a[[j]][w_]]->oip[a[[j]][w],\[Rho]],oip[n__,\[Rho],m__,a[[j]][w_],l__]/;iffreeq[l,a]->oip[a[[j]][w],n,\[Rho],m,l],oip[n__,\[Rho],a[[j]][w_],l__]/;iffreeq[l,a]->oip[a[[j]][w],n,\[Rho],l],oip[\[Rho],m__,a[[j]][w_],l__]/;iffreeq[l,a]->oip[a[[j]][w],\[Rho],m,l],oip[\[Rho],a[[j]][w_],l__]/;iffreeq[l,a]->oip[a[[j]][w],\[Rho],l]},{j,1,Length[a]}]])/.{oip->op}]

nmVacExpect[a_,expr_,\[Rho]_]:=Module[{oip,j} ,Simplify[nmExpect[Union[a,SuperDagger[a]],expr,\[Rho]]/. {op->oip}]//. (Flatten[Table[{oip[n__,a[[j]][w_],m__,\[Rho],l__]/;iffreeq[m,SuperDagger[a]]->0,oip[n__,a[[j]][w_],m__,\[Rho]]/;iffreeq[m,SuperDagger[a]]->0,oip[n__,a[[j]][w_],\[Rho],l__]->0,oip[a[[j]][w_],m__,\[Rho],l__]/;iffreeq[m,SuperDagger[a]]->0,oip[a[[j]][w_],m__,\[Rho]]/;iffreeq[m,SuperDagger[a]]->0,oip[a[[j]][w_],\[Rho],l__]->0,oip[n__,a[[j]][w_],\[Rho]]->0,oip[n__,SuperDagger[a][[j]][w_],m__,\[Rho],l__]/;(iffreeq[n,a]&&iffreeq[l,a])->0,oip[n__,SuperDagger[a][[j]][w_],m__,\[Rho]]/;iffreeq[n,a]->0,oip[n__,SuperDagger[a][[j]][w_],\[Rho],l__]/;(iffreeq[n,a]&&iffreeq[l,a])->0,oip[SuperDagger[a][[j]][w_],m__,\[Rho],l__]/;iffreeq[l,a]->0,oip[SuperDagger[a][[j]][w_],m__,\[Rho]]->0,oip[SuperDagger[a][[j]][w_],\[Rho],l__]/;iffreeq[l,a]->0,oip[n__,SuperDagger[a][[j]][w_],\[Rho]]/;iffreeq[n,a]->0},{j,1,Length[a]}]])/. {oip->op}]


contraction[a_,b_,c_]:=(
op[a,b]:=c;
op[n1__,a,b]:=op[n1,c];
op[a,b,m1__]:=op[c,m1];
op[n1__,a,b,m1__]:=op[n1,c,m1];
op[SuperDagger[b],SuperDagger[a]]:=SuperDagger[c];
op[n1__,SuperDagger[b],SuperDagger[a]]:=op[n1,SuperDagger[c]];
op[SuperDagger[b],SuperDagger[a],m1__]:=op[SuperDagger[c],m1];
op[n1__,SuperDagger[b],SuperDagger[a],m1__]:=op[n1,SuperDagger[c],m1];
)

contractionUnidirectional[a_,b_,c_]:=(
op[a,b]:=c;
op[n1__,a,b]:=op[n1,c];
op[a,b,m1__]:=op[c,m1];
op[n1__,a,b,m1__]:=op[n1,c,m1];
)

nmContractionArray[a_,b_,c_]:=(
op[a[n_],b[m_]]:=c[n,m];
op[n1__,a[n_],b[m_]]:=op[n1,c[n,m]];
op[a[n_],b[m_],m1__]:=op[c[n,m],m1];
op[n1__,a[n_],b[m_],m1__]:=op[n1,c[n,m],m1];
op[SuperDagger[b][m_],SuperDagger[a][n_]]:=SuperDagger[c][n,m];
op[n1__,SuperDagger[b][m_],SuperDagger[a][n_]]:=op[n1,SuperDagger[c][n,m]];
op[SuperDagger[b][m_],SuperDagger[a][n_],m1__]:=op[SuperDagger[c][n,m],m1];
op[n1__,SuperDagger[b][m_],SuperDagger[a][n_],m1__]:=op[n1,SuperDagger[c][n,m],m1];
)

nmContractionArrayUnidirectional[a_,b_,c_]:=(
op[a[n_],b[m_]]:=c[n,m];
op[n1__,a[n_],b[m_]]:=op[n1,c[n,m]];
op[a[n_],b[m_],m1__]:=op[c[n,m],m1];
op[n1__,a[n_],b[m_],m1__]:=op[n1,c[n,m],m1];
)

constContractionArray[a_,b_,c_]:=(
op[a[n_],b[m_]]:=c;
op[n1__,a[n_],b[m_]]:=op[n1,c];
op[a[n_],b[m_],m1__]:=op[c,m1];
op[n1__,a[n_],b[m_],m1__]:=op[n1,c,m1];
op[SuperDagger[b][m_],SuperDagger[a][n_]]:=SuperDagger[c];
op[n1__,SuperDagger[b][m_],SuperDagger[a][n_]]:=op[n1,SuperDagger[c]];
op[SuperDagger[b][m_],SuperDagger[a][n_],m1__]:=op[SuperDagger[c],m1];
op[n1__,SuperDagger[b][m_],SuperDagger[a][n_],m1__]:=op[n1,SuperDagger[c],m1];
)

constContractionArrayUnidirectional[a_,b_,c_]:=(
op[a[n_],b[m_]]:=c;
op[n1__,a[n_],b[m_]]:=op[n1,c];
op[a[n_],b[m_],m1__]:=op[c,m1];
op[n1__,a[n_],b[m_],m1__]:=op[n1,c,m1];
)

stochOpReplacement[a_,left_,right_,\[Rho]_]:=(
op[a,\[Rho]]:=op[left,\[Rho]];
op[n1__,a,\[Rho]]:=op[left,n1,\[Rho]];
op[a,\[Rho],m1__]:=op[left,\[Rho],m1];
op[n1__,a,\[Rho],m1__]:=op[left,n1,\[Rho],m1];
op[\[Rho],a]:=op[right,\[Rho]];
op[n1__,\[Rho],a]:=op[right,n1,\[Rho]];
op[\[Rho],a,m1__]:=op[right,\[Rho],m1];
op[n1__,\[Rho],a,m1__]:=op[right,n1,\[Rho],m1];
)

stochOpReplacementArray[a_,left_,right_,\[Rho]_]:=(
op[a[n_],\[Rho]]:=op[left[n],\[Rho]];
op[n1__,a[n_],\[Rho]]:=op[left[n],n1,\[Rho]];
op[a[n_],\[Rho],m1__]:=op[left[n],\[Rho],m1];
op[n1__,a[n_],\[Rho],m1__]:=op[left[n],n1,\[Rho],m1];
op[\[Rho],a[n_]]:=op[right[n],\[Rho]];
op[n1__,\[Rho],a[n_]]:=op[right[n],n1,\[Rho]];
op[\[Rho],a[n_],m1__]:=op[right[n],\[Rho],m1];
op[n1__,\[Rho],a[n_],m1__]:=op[right[n],n1,\[Rho],m1];
)

\[ScriptCapitalD][c_,\[Rho]_]:=op[c,\[Rho],SuperDagger[c]]-1/2 (op[SuperDagger[c],c,\[Rho]]+op[\[Rho],SuperDagger[c],c])
\[ScriptCapitalD]s[c_,\[Rho]_]:=op[SuperDagger[c],\[Rho],c]-1/2 (op[SuperDagger[c],c,\[Rho]]+op[\[Rho],SuperDagger[c],c])

symmetriser[l_]:=Module[{a,b},a=Permutations[l];b=Length[a];Total[Apply[op,a,1]]/b]



